#![allow(non_snake_case, unused_macros)]

use proconio::input;
use rand::prelude::*;
use svg::node::{
    element::{Group, Rectangle, Symbol, Title, Use},
    Text,
};

pub trait SetMinMax {
    fn setmin(&mut self, v: Self) -> bool;
    fn setmax(&mut self, v: Self) -> bool;
}
impl<T> SetMinMax for T
where
    T: PartialOrd,
{
    fn setmin(&mut self, v: T) -> bool {
        *self > v && {
            *self = v;
            true
        }
    }
    fn setmax(&mut self, v: T) -> bool {
        *self < v && {
            *self = v;
            true
        }
    }
}

#[macro_export]
macro_rules! mat {
	($($e:expr),*) => { Vec::from(vec![$($e),*]) };
	($($e:expr,)*) => { Vec::from(vec![$($e),*]) };
	($e:expr; $d:expr) => { Vec::from(vec![$e; $d]) };
	($e:expr; $d:expr $(; $ds:expr)+) => { Vec::from(vec![mat![$e $(; $ds)*]; $d]) };
}

pub const N: usize = 10;
pub const M: usize = 3;

pub type Output = Vec<char>;

#[derive(Clone, Debug)]
pub struct Input {
    pub fs: Vec<usize>,
    pub ps: Vec<usize>,
}

impl std::fmt::Display for Input {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        for i in 0..self.fs.len() {
            if i > 0 {
                write!(f, " ")?;
            }
            write!(f, "{}", self.fs[i])?;
        }
        writeln!(f)?;
        for &p in &self.ps {
            writeln!(f, "{}", p)?;
        }
        Ok(())
    }
}

pub fn parse_input(f: &str) -> Input {
    let f = proconio::source::once::OnceSource::from(f);
    input! {
        from f,
        fs: [usize; N * N],
        ps: [usize; N * N],
    }
    Input { fs, ps }
}

fn read(v: &str) -> Result<char, String> {
    if v.len() != 1 {
        Err(format!("Illegal output: {}", v))
    } else {
        Ok(v.chars().next().unwrap())
    }
}

pub fn parse_output(_input: &Input, f: &str) -> Result<Output, String> {
    let tokens = f.lines();
    let mut out = vec![];
    for v in tokens {
        let v = v.trim();
        if v.len() == 0 {
            continue;
        }
        out.push(read(v)?);
    }
    Ok(out)
}

#[derive(Clone, Debug)]
pub struct State {
    pub fs: Vec<usize>,
    pub ps: Vec<usize>,
    pub board: Vec<Vec<usize>>,
    pub t: usize,
    pub last: (usize, usize),
}

impl State {
    pub fn new(input: &Input) -> Self {
        let mut board = mat![0; N; N];
        let last = ((input.ps[0] - 1) / N, (input.ps[0] - 1) % N);
        board[last.0][last.1] = input.fs[0];
        Self {
            fs: input.fs.clone(),
            ps: input.ps.clone(),
            board,
            t: 0,
            last,
        }
    }
    pub fn apply_move(&mut self, dir: char) -> Result<(), String> {
        match dir {
            'L' => {
                for i in 0..N {
                    let mut k = 0;
                    for j in 0..N {
                        if self.board[i][j] != 0 {
                            self.board[i][k] = self.board[i][j];
                            if k != j {
                                self.board[i][j] = 0;
                            }
                            k += 1;
                        }
                    }
                }
            }
            'R' => {
                for i in 0..N {
                    let mut k = N - 1;
                    for j in (0..N).rev() {
                        if self.board[i][j] != 0 {
                            self.board[i][k] = self.board[i][j];
                            if k != j {
                                self.board[i][j] = 0;
                            }
                            k -= 1;
                        }
                    }
                }
            }
            'F' => {
                for j in 0..N {
                    let mut k = 0;
                    for i in 0..N {
                        if self.board[i][j] != 0 {
                            self.board[k][j] = self.board[i][j];
                            if k != i {
                                self.board[i][j] = 0;
                            }
                            k += 1;
                        }
                    }
                }
            }
            'B' => {
                for j in 0..N {
                    let mut k = N - 1;
                    for i in (0..N).rev() {
                        if self.board[i][j] != 0 {
                            self.board[k][j] = self.board[i][j];
                            if k != i {
                                self.board[i][j] = 0;
                            }
                            k -= 1;
                        }
                    }
                }
            }
            _ => {
                return Err(format!("Illegal output: {}", dir));
            }
        }
        self.t += 1;
        let mut p = 0;
        for i in 0..N {
            for j in 0..N {
                if self.board[i][j] == 0 {
                    p += 1;
                    if p == self.ps[self.t] {
                        self.board[i][j] = self.fs[self.t];
                        self.last = (i, j);
                    }
                }
            }
        }
        Ok(())
    }
}

pub const DIJ: [(usize, usize); 4] = [(1, 0), (0, 1), (!0, 0), (0, !0)];

pub fn compute_score(input: &Input, out: &[char]) -> (i64, String, State) {
    let mut state = State::new(input);
    for t in 0..out.len().min(N * N - 1) {
        if let Err(err) = state.apply_move(out[t]) {
            return (0, format!("{} (turn: {})", err, t), state);
        }
    }
    let mut visited = mat![false; N; N];
    let mut num = 0;
    for i in 0..N {
        for j in 0..N {
            if !visited[i][j] && state.board[i][j] != 0 {
                visited[i][j] = true;
                let c = state.board[i][j];
                let mut size = 1;
                let mut stack = vec![(i, j)];
                while let Some((i, j)) = stack.pop() {
                    for &(di, dj) in &DIJ {
                        let i2 = i + di;
                        let j2 = j + dj;
                        if i2 < N && j2 < N && !visited[i2][j2] && state.board[i2][j2] == c {
                            visited[i2][j2] = true;
                            stack.push((i2, j2));
                            size += 1;
                        }
                    }
                }
                num += size * size;
            }
        }
    }
    let mut d = vec![0; M + 1];
    for &f in &input.fs {
        d[f] += 1;
    }
    let score = (1e6 * num as f64 / d[1..].iter().map(|d| d * d).sum::<i32>() as f64).round() as i64;
    (score, String::new(), state)
}

pub fn gen(seed: u64) -> Input {
    let mut rng = rand_chacha::ChaCha20Rng::seed_from_u64(seed);
    let mut cs = vec![];
    let mut ps = vec![];
    for t in 0..N * N {
        cs.push(rng.gen_range(0, M as i32) as usize + 1);
        ps.push(rng.gen_range(0, (N * N - t) as i32) as usize + 1);
    }
    Input { ps, fs: cs }
}

pub fn rect(x: usize, y: usize, w: usize, h: usize, fill: &str) -> Rectangle {
    Rectangle::new()
        .set("x", x)
        .set("y", y)
        .set("width", w)
        .set("height", h)
        .set("fill", fill)
}

// https://www.svgrepo.com/svg/74008/candy
// https://www.svgrepo.com/svg/74007/watermelon
// https://www.svgrepo.com/svg/214806/pumpkin-autumn
pub const CANDY: [&'static str; 3] = [
    r#"	<path style="fill:#A3E175;" d="M126.469,234.699l42.03-32.263c2.371-1.819,5.597-2.058,8.209-0.607
c2.613,1.452,4.115,4.316,3.822,7.291l-5.597,56.892l33.752-45.854c1.723-2.343,4.645-3.479,7.499-2.91
c2.853,0.565,5.121,2.729,5.821,5.552l12.994,52.41l12.993-52.41c0.7-2.822,2.968-4.986,5.821-5.552
c2.854-0.563,5.775,0.568,7.499,2.91l33.751,45.854l-5.597-56.891c-0.292-2.975,1.209-5.839,3.822-7.291
c2.612-1.451,5.838-1.212,8.209,0.607l42.033,32.264c-12.35-48.414-56.324-84.323-108.531-84.323
C182.794,150.379,138.82,186.286,126.469,234.699z"/>
<path style="fill:#A3E175;" d="M216.507,136.663c-10.487-26.4-17.139-63.288-20.997-91.124c-0.568-4.103,2.297-7.89,6.4-8.458
c4.104-0.569,7.89,2.297,8.458,6.399c3.259,23.52,10.314,65.559,21.867,91.934c0.919-0.02,1.84-0.035,2.763-0.035
c0.924,0,1.845,0.015,2.765,0.035c3.667-8.379,7.164-18.979,10.418-31.613c1.033-4.012,5.125-6.427,9.134-5.393
c4.011,1.032,6.425,5.122,5.393,9.133c-2.871,11.15-5.96,20.896-9.222,29.125c44.84-30.489,68.455-87.331,76.187-109.16
c-8.687-1.282-14.323-4.123-19.45-6.707c-6.174-3.112-11.507-5.8-22.823-5.8c-11.317,0-16.65,2.688-22.825,5.8
c-6.887,3.471-14.692,7.404-29.576,7.404s-22.689-3.934-29.576-7.404c-6.175-3.112-11.508-5.8-22.825-5.8
c-11.316,0-16.649,2.688-22.823,5.8c-5.125,2.583-10.76,5.423-19.442,6.706C148.087,49.344,171.755,106.225,216.507,136.663z
 M254.516,74.983c1.883-10.001,3.604-20.6,5.114-31.501c0.569-4.103,4.352-6.967,8.459-6.399c4.103,0.568,6.968,4.355,6.399,8.458
c-1.544,11.14-3.304,21.979-5.231,32.218c-0.678,3.602-3.826,6.113-7.362,6.113c-0.46,0-0.927-0.042-1.396-0.131
C256.429,82.976,253.75,79.055,254.516,74.983z"/>
<path style="fill:#E7453F;" d="M346.993,434.997V262.372c0-2.094-0.063-4.173-0.177-6.239l-40.727-31.262l6.574,66.828
c0.331,3.36-1.625,6.527-4.778,7.737c-3.153,1.208-6.725,0.161-8.726-2.557l-40.453-54.959l-16.427,66.26
c-0.83,3.346-3.833,5.695-7.28,5.695c-3.447,0-6.45-2.35-7.28-5.695l-16.428-66.261l-40.455,54.959
c-2.001,2.72-5.574,3.766-8.726,2.557c-3.153-1.21-5.108-4.377-4.778-7.737l6.575-66.828l-40.725,31.261
c-0.114,2.067-0.177,4.146-0.177,6.241v172.625c14.16,5.185,59.253,20.002,111.993,20.002
C287.735,454.999,332.827,440.184,346.993,434.997z M288.212,323.587c0-4.143,3.358-7.5,7.5-7.5s7.5,3.357,7.5,7.5v13.323
c0,4.143-3.358,7.5-7.5,7.5s-7.5-3.357-7.5-7.5V323.587z M288.212,408.389c0-4.143,3.358-7.5,7.5-7.5s7.5,3.357,7.5,7.5v13.322
c0,4.143-3.358,7.5-7.5,7.5s-7.5-3.357-7.5-7.5V408.389z M183.719,421.711c0,4.143-3.358,7.5-7.5,7.5s-7.5-3.357-7.5-7.5v-13.322
c0-4.143,3.358-7.5,7.5-7.5s7.5,3.357,7.5,7.5V421.711z M183.719,336.91c0,4.143-3.358,7.5-7.5,7.5s-7.5-3.357-7.5-7.5v-13.323
c0-4.143,3.358-7.5,7.5-7.5s7.5,3.357,7.5,7.5V336.91z M228.465,379.311v-13.322c0-4.143,3.358-7.5,7.5-7.5s7.5,3.357,7.5,7.5
v13.322c0,4.143-3.358,7.5-7.5,7.5S228.465,383.453,228.465,379.311z"/>
<path style="fill:#3D2A20;" d="M272.663,141.08c52.525-42.818,73.422-115.044,74.352-118.338c0.638-2.262,0.181-4.69-1.237-6.564
c-1.417-1.873-3.631-2.974-5.98-2.974c-11.316,0-16.649-2.688-22.823-5.8C310.088,3.934,302.282,0,287.4,0
c-14.883,0-22.689,3.934-29.576,7.404c-6.175,3.112-11.508,5.8-22.825,5.8s-16.65-2.688-22.825-5.8
C205.288,3.934,197.482,0,182.599,0c-14.882,0-22.688,3.934-29.574,7.404c-6.174,3.112-11.507,5.8-22.823,5.8
c-2.349,0-4.563,1.101-5.98,2.974c-1.418,1.874-1.875,4.303-1.237,6.564c0.93,3.294,21.827,75.52,74.352,118.338
c-51.693,16.085-89.33,64.375-89.33,121.292v177.782c0,3.025,1.818,5.755,4.609,6.921c2.241,0.936,55.654,22.924,122.384,22.924
s120.143-21.988,122.384-22.924c2.792-1.166,4.609-3.896,4.609-6.921V262.372C361.993,205.456,324.356,157.166,272.663,141.08z
 M159.776,20.8c6.174-3.112,11.507-5.8,22.823-5.8c11.317,0,16.65,2.688,22.825,5.8c6.887,3.471,14.692,7.404,29.576,7.404
s22.689-3.934,29.576-7.404c6.175-3.112,11.508-5.8,22.825-5.8c11.316,0,16.649,2.688,22.823,5.8
c5.127,2.584,10.763,5.425,19.45,6.707c-7.731,21.829-31.347,78.671-76.187,109.16c3.262-8.229,6.35-17.976,9.222-29.125
c1.033-4.011-1.381-8.101-5.393-9.133c-4.008-1.034-8.101,1.381-9.134,5.393c-3.254,12.635-6.75,23.234-10.418,31.613
c-0.92-0.02-1.841-0.035-2.765-0.035c-0.924,0-1.844,0.015-2.763,0.035C220.683,109.04,213.627,67,210.369,43.48
c-0.569-4.103-4.354-6.969-8.458-6.399c-4.103,0.568-6.968,4.355-6.4,8.458c3.857,27.836,10.509,64.724,20.997,91.124
c-44.752-30.438-68.42-87.319-76.173-109.157C149.016,26.223,154.65,23.383,159.776,20.8z M235,150.379
c52.207,0,96.181,35.908,108.531,84.323l-42.033-32.264c-2.371-1.819-5.597-2.059-8.209-0.607
c-2.613,1.452-4.114,4.316-3.822,7.291l5.597,56.891l-33.751-45.854c-1.724-2.342-4.646-3.474-7.499-2.91
c-2.853,0.565-5.121,2.729-5.821,5.552l-12.993,52.41l-12.994-52.41c-0.7-2.823-2.968-4.986-5.821-5.552
c-2.854-0.568-5.776,0.567-7.499,2.91l-33.752,45.854l5.597-56.892c0.293-2.975-1.209-5.839-3.822-7.291
c-2.612-1.45-5.838-1.212-8.209,0.607l-42.03,32.263C138.82,186.286,182.794,150.379,235,150.379z M123.006,262.372
c0-2.094,0.063-4.174,0.177-6.241l40.725-31.261l-6.575,66.828c-0.331,3.36,1.625,6.527,4.778,7.737
c3.152,1.209,6.725,0.163,8.726-2.557l40.455-54.959l16.428,66.261c0.83,3.346,3.833,5.695,7.28,5.695
c3.447,0,6.45-2.35,7.28-5.695l16.427-66.26l40.453,54.959c2.001,2.718,5.573,3.765,8.726,2.557
c3.153-1.21,5.108-4.377,4.778-7.737l-6.574-66.828l40.727,31.262c0.114,2.066,0.177,4.145,0.177,6.239v172.625
c-14.166,5.187-59.257,20.002-111.993,20.002c-52.74,0-97.833-14.817-111.993-20.002V262.372z"/>
<path style="fill:#FFEABD;" d="M176.219,400.889c-4.142,0-7.5,3.357-7.5,7.5v13.322c0,4.143,3.358,7.5,7.5,7.5s7.5-3.357,7.5-7.5
v-13.322C183.719,404.246,180.361,400.889,176.219,400.889z"/>
<path style="fill:#FFEABD;" d="M295.712,429.211c4.142,0,7.5-3.357,7.5-7.5v-13.322c0-4.143-3.358-7.5-7.5-7.5s-7.5,3.357-7.5,7.5
v13.322C288.212,425.854,291.57,429.211,295.712,429.211z"/>
<path style="fill:#FFEABD;" d="M176.219,316.087c-4.142,0-7.5,3.357-7.5,7.5v13.323c0,4.143,3.358,7.5,7.5,7.5s7.5-3.357,7.5-7.5
v-13.323C183.719,319.444,180.361,316.087,176.219,316.087z"/>
<path style="fill:#FFEABD;" d="M243.465,379.311v-13.322c0-4.143-3.358-7.5-7.5-7.5s-7.5,3.357-7.5,7.5v13.322
c0,4.143,3.358,7.5,7.5,7.5S243.465,383.453,243.465,379.311z"/>
<path style="fill:#FFEABD;" d="M295.712,344.41c4.142,0,7.5-3.357,7.5-7.5v-13.323c0-4.143-3.358-7.5-7.5-7.5s-7.5,3.357-7.5,7.5
v13.323C288.212,341.053,291.57,344.41,295.712,344.41z"/>
<path style="fill:#3D2A20;" d="M260.499,83.741c0.469,0.089,0.936,0.131,1.396,0.131c3.536,0,6.684-2.512,7.362-6.113
c1.927-10.238,3.688-21.078,5.231-32.218c0.568-4.103-2.297-7.89-6.399-8.458c-4.107-0.567-7.89,2.297-8.459,6.399
c-1.511,10.901-3.231,21.5-5.114,31.501C253.75,79.055,256.429,82.976,260.499,83.741z"/>"#,
    r#"	<path style="fill:#66CD19;" d="M345.231,336.623c8.415-31.031,12.682-65.222,12.682-101.623
c0-60.963-12.283-116.807-34.585-157.243c-12.914-23.413-34.094-50.492-65.663-59.586c6.16,11.56,11.385,28.687,15.758,51.534
c0.779,4.068-1.888,7.998-5.956,8.776c-0.02,0.004-0.041,0.005-0.061,0.009c0.826,4.757,1.609,9.713,2.349,14.846
c4.149-0.549,7.92,2.341,8.46,6.448c4.53,34.378,7.181,75.92,7.667,120.134c0.045,4.142-3.275,7.537-7.417,7.582
c-0.007,2.492,0.002,4.989,0.002,7.5c0,2.511-0.009,5.01-0.023,7.501c4.162,0.045,7.483,3.439,7.438,7.581
c-0.651,59.282-5.205,113.3-12.821,152.104c-4.297,21.896-9.401,38.385-15.386,49.623c32.725-9.436,60.1-39.632,78.5-87.375
c1.476-3.83,5.751-5.749,9.589-4.336c1.647-4.652,3.197-9.423,4.647-14.306C346.472,344.67,344.155,340.588,345.231,336.623z"/>
<path style="fill:#66CD19;" d="M104.656,242.505c4.104-0.076,7.547,3.129,7.682,7.248c1.899,57.605,15.044,109.876,37.015,147.184
c12.629,21.445,33.076,46.219,62.972,54.877c-6.434-12.074-11.849-30.21-16.331-54.592C188.28,355.262,184.032,297.65,184.032,235
s4.248-120.262,11.961-162.221c4.482-24.381,9.896-42.518,16.329-54.592c-29.894,8.658-50.341,33.432-62.97,54.877
c-21.971,37.308-35.116,89.579-37.015,147.184c-0.134,4.056-3.464,7.253-7.492,7.253c-0.063,0-0.127-0.002-0.191-0.003
c-0.041,2.492-0.069,4.991-0.069,7.503C104.587,237.513,104.615,240.012,104.656,242.505z"/>
<path style="fill:#A3E175;" d="M299.553,24.389c13.906,11.549,26.377,27.026,36.909,46.123
C359.968,113.13,372.913,171.546,372.913,235c0,37.727-4.443,73.238-13.205,105.549c-0.906,3.34-3.932,5.539-7.234,5.539
c-0.65,0-1.31-0.085-1.967-0.263c-0.032-0.009-0.062-0.022-0.095-0.031c-1.45,4.882-3,9.653-4.647,14.306
c0.035,0.013,0.071,0.021,0.106,0.035c3.865,1.489,5.791,5.83,4.301,9.695c-11.811,30.645-27.398,54.929-46.332,72.18
c-1.333,1.214-2.679,2.385-4.035,3.521C386.716,418.895,444.852,338.461,444.852,235
C444.852,131.439,386.604,50.946,299.553,24.389z"/>
<path style="fill:#A3E175;" d="M278.445,227.5c-0.021,0-0.042,0-0.063,0c-4.104,0-7.453-3.304-7.498-7.417
c-0.479-43.625-3.086-84.546-7.539-118.34c-0.539-4.091,2.328-7.844,6.411-8.407c-0.74-5.133-1.523-10.089-2.349-14.846
c-0.456,0.083-0.91,0.127-1.358,0.127c-3.527,0-6.67-2.5-7.358-6.091C249.981,27.022,239.386,15,235,15
c-4.543,0-15.458,12.643-24.254,60.491c-7.554,41.092-11.714,97.74-11.714,159.509s4.16,118.417,11.714,159.509
C219.542,442.357,230.457,455,235,455c4.292,0,14.694-11.642,23.342-55.702c7.445-37.934,11.899-90.985,12.541-149.38
c0.045-4.134,3.394-7.437,7.562-7.416c0.014-2.492,0.023-4.99,0.023-7.501C278.468,232.489,278.458,229.991,278.445,227.5z"/>
<path style="fill:#A3E175;" d="M170.192,445.529c-12.593-10.526-23.92-24.265-33.765-40.981
c-23.222-39.433-37.102-94.231-39.082-154.301c-0.136-4.14,3.109-7.606,7.249-7.743c0.021-0.001,0.04,0.002,0.061,0.001
c-0.041-2.493-0.069-4.993-0.069-7.505c0-2.512,0.028-5.011,0.069-7.503c-0.02,0-0.04,0-0.061-0.001
c-4.14-0.137-7.385-3.604-7.249-7.743c1.98-60.07,15.86-114.869,39.082-154.301c9.844-16.716,21.172-30.455,33.765-40.981
C83.283,51.107,25.148,131.54,25.148,235S83.283,418.893,170.192,445.529z"/>
<path style="fill:#3D2A20;" d="M398.682,69.058c-20.034-21.794-43.944-38.805-71.069-50.561C299.294,6.223,268.135,0,235,0
s-64.294,6.223-92.613,18.497c-27.125,11.756-51.035,28.767-71.069,50.561C31.872,111.971,10.148,170.904,10.148,235
c0,64.097,21.724,123.029,61.17,165.942c20.034,21.794,43.944,38.806,71.069,50.561C170.706,463.777,201.865,470,235,470
s64.294-6.223,92.613-18.497c27.125-11.755,51.035-28.767,71.069-50.561c39.446-42.913,61.17-101.846,61.17-165.942
C459.852,170.904,438.128,111.971,398.682,69.058z M170.192,24.471c-12.593,10.526-23.92,24.265-33.765,40.981
c-23.222,39.433-37.102,94.231-39.082,154.301c-0.136,4.14,3.109,7.606,7.249,7.743c0.02,0.001,0.041,0,0.061,0.001
c0.064,0.001,0.127,0.003,0.191,0.003c4.028,0,7.358-3.197,7.492-7.253c1.899-57.605,15.044-109.876,37.015-147.184
c12.629-21.445,33.076-46.218,62.97-54.877c-6.434,12.074-11.848,30.211-16.329,54.592C188.28,114.738,184.032,172.35,184.032,235
s4.248,120.262,11.961,162.221c4.482,24.382,9.897,42.519,16.331,54.592c-29.895-8.658-50.343-33.432-62.972-54.877
c-21.971-37.308-35.116-89.579-37.015-147.184c-0.136-4.119-3.578-7.324-7.682-7.248c-0.021,0-0.04-0.002-0.061-0.001
c-4.14,0.137-7.385,3.604-7.249,7.743c1.98,60.07,15.86,114.869,39.082,154.301c9.844,16.716,21.172,30.455,33.765,40.981
C83.283,418.893,25.148,338.46,25.148,235S83.283,51.107,170.192,24.471z M299.805,445.53c1.356-1.136,2.702-2.307,4.035-3.521
c18.933-17.25,34.521-41.535,46.332-72.18c1.49-3.865-0.436-8.206-4.301-9.695c-0.035-0.013-0.071-0.022-0.106-0.035
c-3.839-1.414-8.114,0.505-9.589,4.336c-18.4,47.743-45.775,77.939-78.5,87.375c5.985-11.237,11.088-27.727,15.386-49.623
c7.617-38.804,12.17-92.823,12.821-152.104c0.045-4.142-3.275-7.537-7.417-7.582c-4.188-0.02-7.537,3.283-7.582,7.417
c-0.642,58.396-5.096,111.446-12.541,149.38C249.694,443.358,239.292,455,235,455c-4.543,0-15.458-12.643-24.254-60.491
c-7.554-41.092-11.714-97.74-11.714-159.509s4.16-118.417,11.714-159.509C219.542,27.643,230.457,15,235,15
c4.386,0,14.981,12.022,23.691,57.524c0.688,3.592,3.831,6.091,7.358,6.091c0.448,0,0.902-0.043,1.358-0.127
c0.02-0.004,0.04-0.005,0.061-0.009c4.068-0.779,6.735-4.708,5.956-8.776c-4.373-22.847-9.598-39.974-15.758-51.534
c31.569,9.094,52.75,36.173,65.663,59.586c22.302,40.437,34.585,96.28,34.585,157.243c0,36.401-4.267,70.592-12.682,101.623
c-1.076,3.965,1.242,8.047,5.181,9.171c0.032,0.009,0.062,0.022,0.095,0.031c0.657,0.178,1.317,0.263,1.967,0.263
c3.303,0,6.328-2.199,7.234-5.539c8.762-32.311,13.205-67.822,13.205-105.549c0-63.454-12.945-121.87-36.451-164.487
c-10.533-19.097-23.004-34.575-36.909-46.123C386.604,50.946,444.852,131.439,444.852,235
C444.852,338.461,386.716,418.895,299.805,445.53z"/>
<path style="fill:#3D2A20;" d="M263.345,101.742c4.452,33.794,7.059,74.715,7.539,118.34c0.045,4.114,3.394,7.417,7.498,7.417
c0.021,0,0.042,0,0.063,0c4.162-0.046,7.483-3.44,7.438-7.582c-0.486-44.214-3.137-85.756-7.667-120.134
c-0.541-4.106-4.311-6.997-8.415-6.456C265.673,93.898,262.806,97.651,263.345,101.742z"/>"#,
    r#"<path style="fill:#F8A805;" d="M324.085,470.442h-136.17c-97.766,0-177.021-79.255-177.021-177.021l0,0
c0-97.766,79.255-177.021,177.021-177.021h136.17c97.766,0,177.021,79.255,177.021,177.021l0,0
C501.106,391.186,421.851,470.442,324.085,470.442z"/>
<path style="fill:#3EAF64;" d="M229.318,118.678c1.544-26.743,5.902-34.431,7.535-59.224c0.663-10.072,9.053-17.896,19.148-17.896
h18.533c0.325,40.324,6.286,44.848,8.15,77.121c0.588,10.181-7.558,18.742-17.757,18.742h-17.85
C236.876,137.422,228.73,128.861,229.318,118.678z"/>
<g>
<polygon style="fill:#E87078;" points="221.14,317.074 256,256.695 290.86,317.074 	"/>
<polygon style="fill:#E87078;" points="117.288,201.552 199.353,271.271 95.926,271.491 	"/>
<polygon style="fill:#E87078;" points="394.712,201.552 312.647,271.271 416.074,271.491 	"/>
<path style="fill:#E87078;" d="M230.4,360.648v11.569h-43.574v-11.569H124.46l0,0c0,30.683,24.873,55.557,55.557,55.557h102.31
    v-19.659h43.574v19.659h6.082c30.684,0,55.557-24.873,55.557-55.557l0,0H230.4z"/>
</g>
<g>
<path style="fill:#231F20;" d="M221.14,327.968h69.719c3.891,0,7.488-2.076,9.434-5.447c1.946-3.37,1.946-7.523,0-10.894
    l-34.86-60.379c-1.946-3.37-5.543-5.447-9.434-5.447c-3.891,0-7.488,2.076-9.434,5.447l-34.86,60.379
    c-1.946,3.37-1.946,7.523,0,10.894C213.652,325.891,217.249,327.968,221.14,327.968z M256,278.482l15.992,27.698h-31.984
    L256,278.482z"/>
<path style="fill:#231F20;" d="M209.582,275.017c1.57-4.286,0.302-9.094-3.175-12.048l-82.065-69.719
    c-2.793-2.375-6.592-3.182-10.117-2.153c-3.519,1.032-6.283,3.765-7.354,7.271l-21.362,69.94c-1.011,3.306-0.39,6.897,1.669,9.672
    c2.056,2.77,5.3,4.403,8.749,4.403c0.008,0,0.016,0,0.023,0l103.427-0.221C203.939,282.154,208.013,279.301,209.582,275.017z
     M110.653,260.565l12.213-39.983l46.913,39.856L110.653,260.565z"/>
<path style="fill:#231F20;" d="M405.129,198.368c-1.071-3.508-3.836-6.241-7.354-7.271c-3.524-1.033-7.324-0.223-10.117,2.153
    l-82.065,69.719c-3.477,2.954-4.745,7.763-3.176,12.048c1.569,4.284,5.643,7.137,10.205,7.147l103.427,0.221
    c0.008,0,0.016,0,0.023,0c3.449,0,6.694-1.633,8.749-4.403c2.06-2.777,2.68-6.366,1.669-9.672L405.129,198.368z M342.22,260.44
    l46.913-39.856l12.213,39.983L342.22,260.44z"/>
<path style="fill:#231F20;" d="M387.54,349.754H230.4c-6.015,0-10.894,4.877-10.894,10.894v0.677h-21.787v-0.677
    c0-2.889-1.148-5.66-3.191-7.703c-2.044-2.043-4.814-3.191-7.703-3.191H124.46c-6.015,0-10.894,4.877-10.894,10.894
    c0,36.641,29.809,66.451,66.451,66.451h102.31c6.015,0,10.894-4.877,10.894-10.894v-8.765h21.787v8.765
    c0,6.017,4.878,10.894,10.894,10.894h6.082c36.642,0,66.451-29.809,66.451-66.451C398.434,354.632,393.556,349.754,387.54,349.754z
     M336.795,405.054v-8.508c0-6.017-4.878-10.894-10.894-10.894h-43.574c-6.015,0-10.894,4.877-10.894,10.894v8.765h-91.416
    c-20.871,0-38.445-14.39-43.321-33.77h39.236v0.677c0,6.017,4.878,10.894,10.894,10.894H230.4c6.015,0,10.894-4.877,10.894-10.894
    v-0.677h134.01C370.808,389.413,355.515,403.041,336.795,405.054z"/>
<path style="fill:#231F20;" d="M324.085,105.506h-31.56c-0.854-7.842-1.947-13.99-3.015-19.993
    c-2.009-11.289-3.906-21.952-4.084-44.043c-0.049-5.982-4.912-10.805-10.894-10.805H256c-15.795,0-28.981,12.332-30.018,28.074
    c-0.747,11.345-2.081,18.839-3.492,26.775c-1.068,6.002-2.16,12.15-3.015,19.992h-31.559C84.298,105.506,0,189.804,0,293.421
    s84.298,187.915,187.915,187.915h136.17C427.702,481.336,512,397.037,512,293.421S427.702,105.506,324.085,105.506z
     M240.193,119.307c0.763-13.213,2.211-21.356,3.745-29.976c1.453-8.169,2.957-16.615,3.783-29.16
    c0.285-4.329,3.922-7.719,8.278-7.719h7.88c0.65,17.046,2.439,27.102,4.18,36.879c1.534,8.62,2.983,16.763,3.745,29.977
    c0.147,2.536-1.096,4.253-1.849,5.051c-1.321,1.4-3.108,2.17-5.032,2.17h-17.851c-1.925,0-3.71-0.771-5.032-2.17
    C241.289,123.56,240.046,121.843,240.193,119.307L240.193,119.307z M324.085,459.548h-136.17
    c-91.603,0-166.128-74.525-166.128-166.128s74.524-166.128,166.128-166.128h29.6c-15.914,5.222-38.888,16.644-50.333,40.712
    c-2.583,5.434-0.273,11.933,5.16,14.516c1.51,0.719,3.103,1.059,4.67,1.059c4.073,0,7.98-2.295,9.846-6.218
    c10.851-22.82,38.498-30.193,47.498-32.028c3.924,1.937,8.279,2.983,12.716,2.983h17.851c4.313,0,8.545-0.992,12.382-2.826
    c9.711,2.083,36.185,9.665,46.745,31.871c1.866,3.924,5.773,6.218,9.846,6.218c1.568,0,3.16-0.341,4.67-1.059
    c5.434-2.584,7.743-9.082,5.16-14.516c-11.44-24.059-34.406-35.487-50.319-40.712h30.676c91.603,0,166.128,74.524,166.128,166.128
    S415.688,459.548,324.085,459.548z"/>
</g>"#,
];

pub fn vis(input: &Input, out: &[char]) -> (i64, String, String) {
    let D = 800 / N;
    let H = N * D;
    let W = N * D;
    let (score, error, state) = compute_score(input, out);
    let mut doc = svg::Document::new()
        .set("id", "vis")
        .set("viewBox", (-5, -5, W + 10, H + 10))
        .set("width", W + 10)
        .set("height", H + 10);
    doc = doc.add(
        Symbol::new()
            .set("id", "candy1")
            .set("viewBox", (0, 0, 470, 470))
            .add(Text::new(CANDY[0])),
    );
    doc = doc.add(
        Symbol::new()
            .set("id", "candy2")
            .set("viewBox", (0, 0, 470, 470))
            .add(Text::new(CANDY[1])),
    );
    doc = doc.add(
        Symbol::new()
            .set("id", "candy3")
            .set("viewBox", (0, 0, 512, 512))
            .add(Text::new(CANDY[2])),
    );
    doc = doc.add(rect(0, 0, W, H, "white").set("stroke", "black").set("stroke-width", 1));
    for i in 0..N {
        for j in 0..N {
            if state.board[i][j] != 0 {
                let color = ["#FFC0CB", "#90EE90", "#FDB55F"][state.board[i][j] - 1];
                let mut ok = 0;
                if i + 1 < N && state.board[i][j] == state.board[i + 1][j] {
                    ok += 1;
                    doc = doc.add(
                        rect(j * D + D / 8, i * D + D / 8, D / 8 * 6, D / 8 * 14, color)
                            .set("rx", 10)
                            .set("ry", 10),
                    );
                }
                if j + 1 < N && state.board[i][j] == state.board[i][j + 1] {
                    ok += 1;
                    doc = doc.add(
                        rect(j * D + D / 8, i * D + D / 8, D / 8 * 14, D / 8 * 6, color)
                            .set("rx", 10)
                            .set("ry", 10),
                    );
                }
                if ok == 2 && state.board[i][j] == state.board[i + 1][j + 1] {
                    doc = doc.add(
                        rect(j * D + D / 8, i * D + D / 8, D / 8 * 14, D / 8 * 14, color)
                            .set("rx", 10)
                            .set("ry", 10),
                    );
                }
            }
        }
    }
    for i in 0..N {
        for j in 0..N {
            if state.board[i][j] != 0 {
                doc = doc.add(
                    Group::new()
                        .add(Title::new().add(Text::new(format!("({}, {})\nf={}", i, j, state.board[i][j]))))
                        .add(
                            Use::new()
                                .set("href", format!("#candy{}", state.board[i][j]))
                                .set("x", j * D + 2)
                                .set("y", i * D + 2)
                                .set("width", D - 4)
                                .set("height", D - 4),
                        ),
                );
            }
        }
    }
    doc = doc.add(
        rect(state.last.1 * D, state.last.0 * D, D, D, "none")
            .set("stroke", "red")
            .set("stroke-width", 4),
    );
    (score, error, doc.to_string())
}
